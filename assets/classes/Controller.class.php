<?php

require_once __DIR__."\\..\\database\\Model.class.php";

class Controller extends Model {

    public function insertNewItem($item){

        // Insert priority: items > catogories > varieties > inventories > specifications

        // Insert into items table first to get item id generated by database
        $item_ready = [$item->getName(), $item->getBrand(), $item->getCountry(), (int) $item->isListed(), $item->getImgCount()];
        $this->dbInsert("items", $item_ready);

        // Get item id from database
        // Query: SELECT i_id FROM items WHERE i_name = ? AND i_brand = ?
        $i_id = $this->dbSelectAttribute_MultiSearch("items", "i_id", ["i_name", "i_brand"], [$item->getName(), $item->getBrand()]);

        // Insert into catogories
        foreach($item->getCatogories() as $catogory){
            $this->dbInsert("catogories", [$catogory]);
        }

        // Insert into varieties
        foreach($item->getVarieties() as $variety){
            $variety_ready = [$variety->getBarcode(), $variety->getProperty(), $variety->getPropertyName(), $variety->getPrice(), $variety->getWeight(), $variety->getWeightUnit(), $variety->getDiscountRate()];
            $this->dbInsert("varieties", $variety_ready);

            // Insert into inventories
            foreach($variety->getInventories() as $inventory){
                $inventory_ready = [$variety->getBarcode(), $inventory->getExpireDate(), $inventory->getQuantity()];
                $this->dbInsert("inventories", $inventory_ready);
            }

            // Insert into specifications
            $specification_ready = [$variety->getBarcode(), $i_id];
            $this->dbInsert("specifications", $specification_ready);
        }

    }

    //Need to use more effecient way //Haven't modify for the chances - 19/11/2020 and 20/11/2020
    public function modifyItemSingleAttr($attrToUpdate, $attrContentToUpdate, $attrToSearch, $attrContentToSearch){
        $this->updateItemAttr($attrToUpdate, $attrContentToUpdate, $attrToSearch, $attrContentToSearch);
    }

    public function replaceAllItemDetail($orgItem, $newItem){
        $this->updateItemAttr("i_name", $newItem->getName(), "i_id", $orgItem->getID());
        $this->updateItemAttr("i_catogory", $newItem->getCatogory(), "i_id", $orgItem->getID());
        $this->updateItemAttr("i_brand", $newItem->getBrand(), "i_id", $orgItem->getID());
        $this->updateItemAttr("i_country", $newItem->getCountry(), "i_id", $orgItem->getID());
        $this->updateItemAttr("i_isListed", $newItem->isListed(), "i_id", $orgItem->getID());

        $newItem->setID($orgItem->getID());

        foreach($newItem->getVarieties() as $variety){
            $this->updateVarietyAttr("v_property", $variety->getProperty(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_propertyType", $variety->getPropertyType(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_price", $variety->getPrice(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_weight", $variety->getWeight(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_weightUnit", $variety->getWeightUnit(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_inventory", $variety->getInventory(), "v_barcode" , $variety->getBarcode());
            $this->updateVarietyAttr("v_discountRate", $variety->getDiscountRate(), "v_barcode" , $variety->getBarcode());
        }

        for($i = 0; $i < sizeof($newItem->getImgPaths()); $i++){
            $this->updateItemImgAttr("imgPath", $newItem->getImgPaths()[$i], "imgPath", $orgItem->getImgPaths()[$i]);
        }
    }

    public function deleteItem($item){
        $this->deleteItemAttr("i_id", $item->getID());
        foreach($item->getVarieties() as $variety){
            $this->deleteVarietyAttr("v_barcode", $variety->getBarcode());
        }
        //To-do: delete the img file from the directory
    }

    public function createNewOrder($dateTime, $orderId, $customer, $cart){

        $customer_ready = [$dateTime, $customer->getName(), $customer->getPhoneMMC(), $customer->getPhone(), $customer->getAddress(), $customer->getPostcode(), $customer->getCity(), $customer->getState()];
        $this->dbInsert("customers", $customer_ready);

        $c_id = $this->dbSelectAttribute("customers", "c_id", "o_date_time", $dateTime);

        $order_ready = [$orderId, $dateTime, $cart->getCartCount(), $cart->getSubtotal(), $c_id];
        $this->dbInsert("orders", $order_ready);

        foreach($cart->getCartItems() as $cartItem){
            $v_barcode = $cartItem->getItem()->getVarieties()[$cartItem->getVarietyIndex()]->getBarcode();
            $s_id = $this->dbSelectAttribute("specifications", "s_id", "v_barcode", $v_barcode);
            $order_items_ready = [$orderId, $s_id, $cartItem->getQuantity()];
            $this->dbInsert("order_items", $order_items_ready);
        }

    }
}

?>
